1. mysql -u root -p 123.  
    ->  start mysql command line. 

2. ALTER USER ‘root’@‘localhost’  IDENTIFIED BY ’123’  
    -> change password.

3. SHOW DATABASES  
    -> list the current databases that exists on database server.

4. CREATE DATABASE database_name 
    -> create new database

5. DROP DATABASE database_name 
    -> delete database.

6. USE database_name 
    -> switch between databases.

7. SELECT database() 
    -> to know which database we are working on.

10. varchar can take max 255 characters.

11. CREATE TABLE table_name(column_name data_type, column_name data_type) 
    -> to create new table.

12. table name should be plural (ex - cats not cat).

13. SHOW TABLES 
    -> to know all the tables in current database.

14. SHOW COLUMNS FROM table_name or DESC table_name or DESCRIBE table_name
    -> to know datatypes of all columns.

15. DROP TABLE table_name
    -> to delete table from the database.

16. INSERT INTO table_name
        (column_name_1, column_name_2) 
    VALUES
        (value_1, value_2), 
        (value_3, value_4)
    -> to insert row into table.

17. SHOW WARNINGS;
    -> if we got warning while executing any query and want to know more about the warning.

18. if the value of the column is missing in insert statement then 'null'(not known) will be inserted for that column.

19. CREATE TABLE table_name(column_name data_type NOT NULL, column_name data_type, NOT NULL) 
    -> to not allow null values use NOT NULL attribues of a column

20. CREATE TABLE table_name (
        column_name data_type DEFAULT 'unamed', 
        column_name data_type, DEFAULT 99
    );
    -> to specify default value use DEFAULT attribues of a column.

21. CREATE TABLE unique_cats (
        cat_id INT NOT NULL AUTO_INCREMENT,
        name VARCHAR(100),
        age INT,
        PRIMARY KEY (cat_id)
    );
    -> AUTO_INCREMENT attribute to auto increment ID.
    -> PRIMARY KEY to uniquely identify a row. 
    -> PRIMARY KEY can be added as column attribute or in the end as PRIMARY KEY(id).

22. The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
    -> ALTER TABLE table_name ADD column_name datatype;
    -> ALTER TABLE table_name DROP COLUMN column_name;
    -> ALTER TABLE table_name MODIFY COLUMN column_name datatype;

22. SELECT * FROM cats WHERE name='egG';
    -> here name is case-insensitive.

23. SELECT name AS 'cat name', breed AS 'kitty breed' FROM cats;
    -> use aliases to give alternate name to a column.

24. UPDATE table_name SET column_name = 'value' WHERE condition='some_condition';
    -> update single or mulitple rows based on some condition.
    -> ex- UPDATE Customers
    -> SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
    -> WHERE CustomerID = 1;

25. DELETE FROM table_name WHERE condition='some';
    -> delete single or multiple rows based on some condition.

26. execute sql files -> source testing/file.sql;

27. SELECT concat(author_fname, " ", author_lname) as "Author Name" FROM books;
    -> concat multiple column values.

28. SELECT 
    CONCAT_WS(' - ', title, author_fname, author_lname) 
    FROM books;
    -> concat but with a seperator between values.
    -> CONCAT_WS indicates concatenate with separator

29. SELECT SUBSTRING(title, 1, 7) as 'short title' FROM books;
    -> select substring from string
    -> index starts from 1 not 0
    -> index can use -ve values as well ( SUBSTRING("Hello", -2) -> "lo")
    -> We can also use SUBSTR, it works same as SUBSTRING

30. SELECT REPLACE(title, "e", 3) FROM books;
    -> to replace a value with another value
    -> here e is to be replaced with 3.

31. SELECT CONCAT(author_fname, REVERSE(author_fname)) as 'palindrome' FROM books;
    ->  REVERSE function reverses string

32. SELECT author_fname, CHAR_LENGTH(author_fname) as 'length' FROM books;
    -> CHAR_LENGTH function gives the length of the string.
      
33. SELECT UPPER(title), LOWER(title) FROM books;
    -> UPPER and LOWER function changes the case of string.

34. SELECT DISTINCT author_lname FROM books;
    -> DISTINCT removed duplicate records.

35. SELECT author_lname FROM books ORDER BY author_lname;
    -> ORDER BY sort the records in ascending order
    -> DESC sort in decreasing order.
    -> ASC for ascending order is the default order.
    -> SELECT title, author_fname, author_lname FROM books ORDER BY 2;
    -> Here 2 refers author_fname(remember index starts from 1)
    -> SELECT author_fname, author_lname FROM books ORDER BY author_lname, author_fname;
    -> here the list is first sorted by author_lname and then author_fname.

36. SELECT title, released_year FROM books ORDER BY released_year LIMIT 3;
    -> LIMIT selects the first 3 records from the list.
    -> SELECT title, released_year FROM books ORDER BY released_year LIMIT 0, 5;
    -> extract five records starting at index 0 row (yes here index starts from 0).
    -> LIMIT 95, 353454354355345 will fetch all the records including after 95.

37. SELECT title, author_fname FROM books WHERE author_fname LIKE '%da%';
    -> LIKE will filter the records which have substing 'da'
    -> substing is case insensitive
    -> we can also find starts with 'da%'
    -> also ends at '%da'.

38. SELECT title, stock_quantity FROM books WHERE stock_quantity LIKE '____';
    -> Wildcard characters to match any character.
    -> here 4 underscores means find where length is 4 random characters.
    -> To search % and _ characters use backslash(\% or \_).

39. SELECT COUNT(author_fname) FROM books;
    -> COUNT function counts the number of rows.
    -> It also counts duplicate rows if we want distinct rows we can use COUNT(DISTINCT author_fname, author_lname).

40. SELECT released_year, COUNT(*) FROM books GROUP BY released_year;
    -> GROUP BY summarizes or aggregates identical data into single rows.
    -> Must be used in conjunction with aggregate functions.

41. SELECT MIN(released_year) FROM books;
    -> fetch the min value in column.
    -> MAX fetches the max value in column.

42. SELECT author_fname,
        author_lname,
        Sum(pages)
    FROM books
    GROUP BY
        author_lname,
        author_fname;
    -> SUM function addition all the values.

43. SELECT author_fname, author_lname, AVG(pages) FROM books GROUP BY author_lname, author_fname;
    -> AVG function calculates average of all the values.

DATE TYPES -

44. CHAR vs VARCHAR
    -> CHAR is fixed length and VARCHAR is variable length. 
    -> CHAR always uses the same amount of storage space per entry, 
    -> while VARCHAR only uses the amount necessary to store the actual text. 
    -> CHAR is a fixed length string data type, 
    -> so any remaining space in the field is padded with blanks. CHAR takes up 1 byte per character.
    -> CHAR is faster for fixed length text.

45. DECIMAL(total_num_of_digits, max_num_of_digits_after_decimal)
    -> Decimal data type is a fixed point type and the calculations are exact. (DECIMAL(15, 2) 15 digits of precision)
    -> total_num_of_digits -> range 1 - 65
    -> max_num_of_digits_after_decimal -> range 0 - 30
    -> ex DECIMAL(5, 2), If we try to insert 11543532 then the number that will get stored it 999.99 which is max limit.
    -> insert 299.9999 value that gets stored is 299.00 due to rounding off.
    -> Should use decimal is precision is important like bank balance

46. FLOAT and DOUBLE
    -> FLOAT and DOUBLE are floating point types and calculations are approximate.
    -> FLOAT and DOUBLE store larger numbers using less space
    -> But it comes at the cost of precision.
    -> FLOAT takes 4 Bytes, Precision issues -> ~7 digits (will have precision issues after around 7 digits)
    -> Double takes 8 Bytes, Precision issues -> ~15 digits (will have precision issues after around 15 digits)

47. DATE
    -> Value with a date but no time
    -> format: 'YYYY-MM-DD'

48. Time 
    -> Store time but not date
    -> format: 'HH:MM:SS'
    
49. DATETIME
    -> store both date and time.
    -> format: 'YYYY-MM-DD HH:MM:SS'

50. CURDATE() CURTIME() NOW()
    -> CURDATE() : gives current date
    -> CURTIME() : gives current time
    -> NOW() : gives current date and time

51. DAY(date) -> will get the day. ex - 11
    DAYNAME(date) -> will get dayname. ex -> monday
    DAYOFWEEK(date) -> ex - friday is 6, saturday is 7.
    DAYOFYEAR(date) -> will get day of year.

52. MONTH(date) -> will get Month
    MONTHNAME(date)

53. HOUR(time) and MINUTE(time)

54. SELECT name, DATE_FORMAT(birthdt, "%W %M %Y") FROM people;
    -> DATE_FORMAT - format date using specifiers
    -> find all Specifier here -> https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format
    
55. SELECT name, DATEDIFF(NOW(), birthdate) AS "Days Old" FROM people;
    -> DATEDIFF to subtract dates.

56. SELECT birthdt, DATE_ADD(birthdt, INTERVAL 1 MONTH) FROM people;
    -> DATE_ADD to add dates or interval.
    -> more straightforward way -> SELECT  birthdt, birthdt + INTERVAL 15 MONTH + INTERVAL 10 HOUR FROM people;

57. DATETIME vs TIMESTAMP (both contains date and time)
    -> DATETIME -> range '1000-01-01 00:00:01' to '9999-12-31 23:59:59'
    -> TIMESTAMP -> range '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC
    -> DATETIME takes 8bytes while TIMESTAMP takes 4bytes.

58: CURRENT_TIMESTAMP vs NOW()
    -> Both takes the current date and time.

59. CREATE TABLE comments2 (
        content VARCHAR(100),
        changed_at TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP
    );
    -> ON UPDATE CURRENT_TIMESTAMP will change the date and time to current.

60. SELECT DATE_FORMAT(NOW(), '%W - %w'), DAYOFWEEK(CURDATE());
    -> In the first argument day of the week starts with 0.
    -> In the second argument day of the week starts with 1.
    
LOGICAL OPERATORS - =, !=, NOT LIKE, >, >=, <, <=, AND, OR, 

61. SELECT title FROM books WHERE title NOT LIKE 'w%';
    -> NOT LIKE (titles which don't start with 'w')

62. SELECT 99 > 1, 99 < 1;
    -> 99 > 1 gives boolean value 1 (i.e true)
    -> 99 < 1 gives boolean value 0 (i.e false)
    -> SELECT 'A' > 'a' -> 0
    -> SELECT 'A' = 'a' -> 1
    -> because sql is case insensitive

63. SELECT title, released_year FROM books WHERE released_year BETWEEN 2004 AND 2015;
    -> BETWEEN can be used to find all the records between two values both inclusive.
    -> BETWEEN paired with AND.

64. SELECT title, released_year FROM books WHERE released_year NOT BETWEEN 2004 AND 2015;
    -> NOT BETWEEN gives records outside the range.

65. SELECT CAST('2015-05-07' AS DATETIME);
    -> CAST function can be used for data type conversion.

66. SELECT title, released_year FROM books WHERE released_year IN (2017, 1985);
    -> IN and NOT IN function checks if the value exists in a list of values.

67. SELECT title, stock_quantity,
        CASE 
            WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
            WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
            ELSE '***'
        END AS 'STOCK'
    FROM books;
    -> CASE statement works like switch

68. Relationships
    -> One to One
    -> One to Many
    -> Many to Many

69. CREATE TABLE orders (
        id INT AUTO_INCREMENT PRIMARY KEY,
        order_date DATE,
        amount DECIMAL(8, 2),
        customer_id INT,
        FOREIGN KEY(customer_id) REFERENCES customers(id)
    );
    -> Foreign references the Primary key of another table.
    -> Foreign key is a link between two tables.
    -> There could be more than one column in Foreign key.
    -> Primary key is a column or a group of columns that uniquely identifies rows.

70. SELECT * FROM customers, orders;
    -> cross join combines each row from the first table with each row from the second table.

71. SELECT * FROM customers INNER JOIN orders ON customers.id = orders.customer_id;
    -> INNER JOIN - combine records from two tables whenever there are matching values in a field common to both tables.
    -> INNER is optional keyword if we don't mention it. it is implied.

72. SELECT * FROM customers 
        LEFT JOIN orders 
            ON customers.id = orders.customer_id;
    -> LEFT JOIN - We use a LEFT JOIN when we want every row from the first table, 
    -> regardless of whether there is a matching row from the second table. 
    -> This is similar to saying, “Return all the data from the first table no matter what.

73. SELECT IFNULL(amount, 0) FROM ORDERS;
    -> IFNULL function checks if the value is null if it is it replaces it with second argument.

74. CREATE TABLE orders(
        id INT AUTO_INCREMENT PRIMARY KEY,
        order_date DATE,
        amount DECIMAL(8,2),
        customer_id INT,
        FOREIGN KEY(customer_id) 
            REFERENCES customers(id)
            ON DELETE CASCADE
    );
    -> ON DELETE CASCADE - specify whether you want rows deleted in a child table 
    -> when corresponding rows are deleted in the parent table.

75. LEFT JOIN becomes the RIGHT JOIN if we swap the tables in query.
    -> some environments doesn't even support RIGHT JOIN.

76. To compare null use 'IS NULL' instead of '= NULL'
    -> It's important to note, that NULL doesn't equal NULL.
    -> NULL is not a value, and therefore cannot be compared to another value.
    -> where x is null checks whether x is a null value.
    -> where x = null is checking whether x equals NULL, which will never be true
    -> null is special value which does not equal anything, so you can't use equality comparison using = for it.

77. ROUND(value, places)
    -> round the floating value to places we specify.

78.  IF(COUNT(rating) >= 1, 'ACTIVE', 'INACTIVE') AS STATUS
    -> If we have only one condition we can use IF function instead of CASE.

79. PRIMARY KEY(user_id, photo_id)
    -> Multiple columns can be made primary key.

80. SELECT users.username, count(photos.id) AS 'total_photos' 
    FROM users
    LEFT JOIN photos
    ON users.id = photos.user_id
    GROUP BY users.id
    HAVING total_photos=0;
    -> HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.
    -> It return rows where aggregate values meet the specified conditions.

81. CREATE TRIGGER trigger_name 
    trigger_time trigger_event ON table_name FOR EACH ROW
    BEGIN
    ...
    END;

    -> TRIGGER - SQL statements that are AUTOMATICALLY RUN when a specific table is changed
    -> trigger_time - 'BEFORE' or 'AFTER'
    -> trigger_event - 'INSERT' or 'UPDATE' or 'DELETE'
    -> table_name - users, photos etc.
    -> ex - DELIMITER $$
                CREATE TRIGGER must_be_adult
                    BEFORE INSERT ON users FOR EACH ROW
                    BEGIN
                        IF NEW.age < 18
                        THEN
                            SIGNAL SQLSTATE '45000'
                                    SET MESSAGE_TEXT = 'Must be an adult!';
                        END IF;
                    END;
            $$
            DELIMITER ;

    -> DELIMITER - describe the symbol which is considered as end of sql statement
    -> Temporary we have changed it from ';' to '$$' because trigger has multiple ';'
    -> and in the end we have reverted it back to ';'
    -> NEW - Refers to data that is about to be inserted
    -> 45000 sql state code is for user defined errors (A generic state representing "unhandled user-defined exception")


82. SHOW TRIGGERS;
    DROP TRIGGER trigger_name;

83. BEGIN TRANSACTION;
    UPDATE something;
    UDATE somethingelse;
    COMMIT;
    -> either all transaction succeeded or all will fail.

84. CREATE INDEX large_table_index on large_table(random_int);
    -> to create DB index on a column
    -> before index one query took 16sec for 50million records.
    -> after index it's almost instant

85. sql Injection or sqli
    -> front end get username and password
    -> query executed on db server: `select * from users where username='${user}' and password='${password}'`
    -> now if the attacker passes username: `kuldeep' --`
    -> final query executed on server -> `select * from users where username='kuldeep' -- and password=${password}`
    -> now -- is used for comment in sql and entire string after kuldeep is ommited and server will fetch the entire user kuldeep.

86. Another sqli example
    -> if username: `kuldeep' OR 1=1 --`
    -> this will fetch the entire user table

87. TRUNCATE TABLE Categories;
    -> The TRUNCATE TABLE command deletes the data inside a table, but not the table itself.
    -> whereas drop will delete the entire table.

88. SQL commands are mainly categorized into four categories as: 
    -> DDL – Data Definition Language (CREATE, ALTER, DROP, TRUNCATE, RENAME)
    -> DQl – Data Query Language (SELECT)
    -> DML – Data Manipulation Language (INSERT, UPDATE, DELETE, CALL, EXPLAIN CALL, LOCK)
    -> DCL – Data Control Language (GRANT, REVOKE)

89. Though many resources claim there to be another category of SQL clauses TCL – Transaction Control Language.
    -> TCL – Transaction Control Language (COMMIT, SAVEPOINT, ROLLBACK, SET TRANSACTION, SET CONSTRAINT)

